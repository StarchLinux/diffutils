DIFF(1)                   BSD General Commands Manual                  DIFF(1)

NNAAMMEE
     ddiiffff — differential file and directory comparator

SSYYNNOOPPSSIISS
     ddiiffff [--aabbddiillppTTttww] [--cc | --ee | --ff | --nn | --qq | --uu] [--II _p_a_t_t_e_r_n] [--LL _l_a_b_e_l]
          _f_i_l_e_1 _f_i_l_e_2
     ddiiffff [--aabbddiillppTTttww] [--II _p_a_t_t_e_r_n] [--LL _l_a_b_e_l] --CC _n_u_m_b_e_r _f_i_l_e_1 _f_i_l_e_2
     ddiiffff [--aabbddiillttww] [--II _p_a_t_t_e_r_n] --DD _s_t_r_i_n_g _f_i_l_e_1 _f_i_l_e_2
     ddiiffff [--aabbddiillppTTttww] [--II _p_a_t_t_e_r_n] [--LL _l_a_b_e_l] --UU _n_u_m_b_e_r _f_i_l_e_1 _f_i_l_e_2
     ddiiffff [--aabbddiillNNPPpprrssTTttww] [--cc | --ee | --ff | --nn | --qq | --uu] [--II _p_a_t_t_e_r_n]
          [--LL _l_a_b_e_l] [--SS _n_a_m_e] [--XX _f_i_l_e] [--xx _p_a_t_t_e_r_n] _d_i_r_1 _d_i_r_2

DDEESSCCRRIIPPTTIIOONN
     The ddiiffff utility compares the contents of _f_i_l_e_1 and _f_i_l_e_2 and writes to
     the standard output the list of changes necessary to convert one file
     into the other.  No output is produced if the files are identical.

     Output options (mutually exclusive):

     --CC _n_u_m_b_e_r
             Like --cc but produces a diff with _n_u_m_b_e_r lines of context.

     --cc      Produces a diff with 3 lines of context.  With --cc the output for‐
             mat is modified slightly: the output begins with identification
             of the files involved and their creation dates and then each
             change is separated by a line with fifteen *'s.  The lines
             removed from _f_i_l_e_1 are marked with ‘- ’; those added to _f_i_l_e_2 are
             marked ‘+ ’.  Lines which are changed from one file to the other
             are marked in both files with ‘! ’.  Changes which lie within 3
             lines of each other are grouped together on output.

     --DD _s_t_r_i_n_g
             Creates a merged version of _f_i_l_e_1 and _f_i_l_e_2 on the standard out‐
             put, with C preprocessor controls included so that a compilation
             of the result without defining _s_t_r_i_n_g is equivalent to compiling
             _f_i_l_e_1, while defining _s_t_r_i_n_g will yield _f_i_l_e_2.

     --ee      Produces output in a form suitable as input for the editor util‐
             ity, ed(1), which can then be used to convert file1 into file2.

             Extra commands are added to the output when comparing directories
             with --ee, so that the result is a sh(1) script for converting text
             files which are common to the two directories from their state in
             _d_i_r_1 to their state in _d_i_r_2.

     --ff      Identical output to that of the --ee flag, but in reverse order.
             It cannot be digested by ed(1).

     --nn      Produces a script similar to that of --ee, but in the opposite
             order and with a count of changed lines on each insert or delete
             command.  This is the form used by rcsdiff(1).

     --qq      Just print a line when the files differ.  Does not output a list
             of changes.

     --UU _n_u_m_b_e_r
             Like --uu but produces a diff with _n_u_m_b_e_r lines of context.

     --uu      Produces a _u_n_i_f_i_e_d diff with 3 lines of context.  A unified diff
             is similar to the context diff produced by the --cc option.  How‐
             ever, unlike with --cc, all lines to be changed (added and/or
             removed) are present in a single section.

     Comparison options:

     --aa      Treat all files as ASCII text.  Normally ddiiffff will simply print
             “Binary files ... differ” if files contain binary characters.
             Use of this option forces ddiiffff to produce a diff.

     --bb      Causes trailing blanks (spaces and tabs) to be ignored, and other
             strings of blanks to compare equal.

     --dd      Try very hard to produce a diff as small as possible.  This may
             consume a lot of processing power and memory when processing
             large files with many changes.

     --II _p_a_t_t_e_r_n
             Ignores changes, insertions, and deletions whose lines match the
             extended regular expression _p_a_t_t_e_r_n.  Multiple --II patterns may be
             specified.  All lines in the change must match some pattern for
             the change to be ignored.  See re_format(7) for more information
             on regular expression patterns.

     --ii      Ignores the case of letters.  E.g., “A” will compare equal to
             “a”.

     --LL _l_a_b_e_l
             Print _l_a_b_e_l instead of the first (and second, if this option is
             specified twice) file name and time in the context or unified
             diff header.

     --ll      Long output format; each text file ddiiffff'd is piped through pr(1)
             to paginate it; other differences are remembered and summarized
             after all text file differences are reported.

     --pp      With unified and context diffs, show with each change the first
             40 characters of the last line before the context beginning with
             a letter, an underscore or a dollar sign.  For C source code fol‐
             lowing standard layout conventions, this will show the prototype
             of the function the change applies to.

     --TT      Print a tab rather than a space before the rest of the line for
             the normal, context or unified output formats.  This makes the
             alignment of tabs in the line consistent.

     --tt      Will expand tabs in output lines.  Normal or --cc output adds char‐
             acter(s) to the front of each line which may screw up the inden‐
             tation of the original source lines and make the output listing
             difficult to interpret.  This option will preserve the original
             source's indentation.

     --ww      Is similar to --bb but causes whitespace (blanks and tabs) to be
             totally ignored.  E.g., “if ( a == b )” will compare equal to
             “if(a==b)”.

     Directory comparison options:

     --NN      If a file is found in only one directory, act as if it was found
             in the other directory too but was of zero size.

     --PP      If a file is found only in _d_i_r_2, act as if it was found in _d_i_r_1
             too but was of zero size.

     --rr      Causes application of ddiiffff recursively to common subdirectories
             encountered.

     --SS _n_a_m_e
             Re-starts a directory ddiiffff in the middle, beginning with file
             _n_a_m_e.

     --ss      Causes ddiiffff to report files which are the same, which are other‐
             wise not mentioned.

     --XX _f_i_l_e
             Exclude files and subdirectories from comparison whose basenames
             match lines in _f_i_l_e.  Multiple --XX options may be specified.

     --xx _p_a_t_t_e_r_n
             Exclude files and subdirectories from comparison whose basenames
             match _p_a_t_t_e_r_n.  Patterns are matched using shell-style globbing
             via fnmatch(3).  Multiple --xx options may be specified.

     If both arguments are directories, ddiiffff sorts the contents of the direc‐
     tories by name, and then runs the regular file ddiiffff algorithm, producing
     a change list, on text files which are different.  Binary files which
     differ, common subdirectories, and files which appear in only one direc‐
     tory are described as such.  In directory mode only regular files and
     directories are compared.  If a non-regular file such as a device special
     file or FIFO is encountered, a diagnostic message is printed.

     If only one of _f_i_l_e_1 and _f_i_l_e_2 is a directory, ddiiffff is applied to the
     non-directory file and the file contained in the directory file with a
     filename that is the same as the last component of the non-directory
     file.

     If either _f_i_l_e_1 or _f_i_l_e_2 is ‘--’, the standard input is used in its place.

   OOuuttppuutt SSttyyllee
     The default (without --ee, --cc, or --nn options) output contains lines of
     these forms, where _X_X, _Y_Y, _Z_Z, _Q_Q are line numbers respective of file
     order.

     XXaaYY        At (the end of) line _X_X of _f_i_l_e_1, append the contents of
                  line _Y_Y of _f_i_l_e_2 to make them equal.
     XXaaYY,ZZ     Same as above, but append the range of lines, _Y_Y through _Z_Z
                  of _f_i_l_e_2 to line _X_X of file1.
     XXddYY        At line _X_X delete the line.  The value _Y_Y tells to which
                  line the change would bring _f_i_l_e_1 in line with _f_i_l_e_1.
     XX,YYddZZ     Delete the range of lines _X_X through _Y_Y in _f_i_l_e_1.
     XXccYY        Change the line _X_X in _f_i_l_e_1 to the line _Y_Y in _f_i_l_e_2.
     XX,YYccZZ     Replace the range of specified lines with the line _Z_Z.
     XX,YYccZZ,QQ  Replace the range _X_X,_Y_Y from _f_i_l_e_1 with the range _Z_Z,_Q_Q from
                  _f_i_l_e_2.

     These lines resemble ed(1) subcommands to convert _f_i_l_e_1 into _f_i_l_e_2.  The
     line numbers before the action letters pertain to _f_i_l_e_1; those after per‐
     tain to _f_i_l_e_2.  Thus, by exchanging aa for dd and reading the line in
     reverse order, one can also determine how to convert _f_i_l_e_2 into _f_i_l_e_1.
     As in ed(1), identical pairs (where num1 = num2) are abbreviated as a
     single number.

EENNVVIIRROONNMMEENNTT
     TMPDIR  If the environment variable TMPDIR exists, ddiiffff will use the
             directory specified by TMPDIR as the temporary directory.

FFIILLEESS
     /tmp/diff._X_X_X_X_X_X_X_X  Temporary file used when comparing a device or the
                         standard input.  Note that the temporary file is
                         unlinked as soon as it is created so it will not show
                         up in a directory listing.

EEXXIITT SSTTAATTUUSS
     The ddiiffff utility exits with one of the following values:

           0       No differences were found.
           1       Differences were found.
           >1      An error occurred.

SSEEEE AALLSSOO
     cmp(1), comm(1), diff3(1), ed(1), patch(1), sdiff(1)

     James W. Hunt and M. Douglas McIlroy, "An Algorithm for Differential File
     Comparison", _C_o_m_p_u_t_i_n_g _S_c_i_e_n_c_e _T_e_c_h_n_i_c_a_l _R_e_p_o_r_t, Bell Laboratories 41,
     June 1976.

SSTTAANNDDAARRDDSS
     The ddiiffff utility is compliant with the IEEE Std 1003.1-2008 (“POSIX.1”)
     specification.

     The flags [--aaDDddIIiiLLllNNnnPPppqqSSssTTttwwXXxx] are extensions to that specification.

HHIISSTTOORRYY
     A ddiiffff command appeared in Version 6 AT&T UNIX.

BBUUGGSS
     When comparing directories with the --bb, --ww or --ii options specified, ddiiffff
     first compares the files ala cmp(1), and then decides to run the ddiiffff
     algorithm if they are not equal.  This may cause a small amount of spuri‐
     ous output if the files then turn out to be identical because the only
     differences are insignificant whitespace or case differences.

BSD                             August 8, 2012                             BSD
